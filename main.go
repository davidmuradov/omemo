package main

import (
	"fmt"
	"crypto/ecdh"
	"crypto/rand"
)

// Constants
const info string = "OMEMO X3DH"
const num_prekeys uint8 = 100
const min_prekeys uint8 = 25

// GenCurve returns a Curve implementing X25519 function
// over Curve25519
func GenCurve() ecdh.Curve{
	var curve25519 ecdh.Curve = ecdh.X25519()
	return curve25519
}

// GenKeyPair returns a multipurpose public key and err from a random
// PrivateKey generated by X25519. Can be used to generate
// a user's long-term Public Identity Key for the X3DH protocol, or an
// ephemeral key, etc.
func GenKeyPair(ellipse ecdh.Curve) (*ecdh.PrivateKey, *ecdh.PublicKey, error) {
	random_private_key, err := ellipse.GenerateKey(rand.Reader)
	if err != nil {
		return nil, err
	}
	PK := random_private_key.PublicKey()
	return PK, nil
}

// Gen

/*
Encode encodes an X25519 public key PK into a byte sequence
The recommended encoding consists of some single-byte constant
to represent the type of curve, followed by little-endian encoding
of the u-coordinate as specified in [1].

func Encode(PK *ecdh.PublicKey) []byte {}
*/

/*
DH(PK1,PK2) is the shared secret output from an ecdh function involving
keypairs involving public keys PK1 and PK2

func DH(PK1, PK2 *ecdh.PublicKey) []byte {}
*/

func main() {
	x25519 := GenCurve()
	IK,_ := GenKeyPair(x25519) // A user's identity key
	EK,_ := GenKeyPair(x25519) // A user's ephemeral key
	fmt.Println(IK)
	fmt.Println(EK)
	// SPK := 
}
